name: deploy

permissions:
  id-token: write  # required for requesting the JWT
  contents: read  # required for actions/checkout

on:
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'environment'
        required: true
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    environment: "${{ github.event.inputs.deployment_environment }}"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up node
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Assume Github OIDC role
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: us-west-2
        role-to-assume: arn:aws:iam::916098889494:role/GithubOIDCRole-MAAP-Project-maap-cdk-pgstac
        role-session-name: MAAP-CDK-pgstac-deploy

    - name: Install deployment dependencies
      run: npm install

    - name: Retrieve parameters from other stacks output
      id: retrieve-parameters
      env:
        AUTH-STACK-NAME: ${{ vars.AUTH_STACK_NAME }}
        ROLES-STACK-NAME: ${{ vars.ROLES_STACK_NAME}}
      run: | 
        echo "JWKS_URL=$(aws cloudformation describe-stacks --stack-name ${AUTH_STACK_NAME} --query 'Stacks[0].Outputs[?OutputKey==`jwksurl`].OutputValue' --output text)" >> $GITHUB_OUTPUT
        echo "DATA_ACCESS_ROLE_ARN=$(aws cloudformation describe-stacks --stack-name ${ROLES_STACK_NAME} --query 'Stacks[0].Outputs[?ExportName==`data-access-role-arn`].OutputValue' --output text)" >> $GITHUB_OUTPUT

    - name: Run CDK deploy
      env:
        STAGE: ${{ github.event.inputs.deployment_environment }}
        STAC_API_INTEGRATION_API_ARN: ${{ vars.STAC_API_INTEGRATION_API_ARN }}
        JWKS_URL: ${{ steps.retrieve-parameters.outputs.JWKS_URL }}
        DATA_ACCESS_ROLE_ARN: ${{ steps.retrieve-parameters.outputs.DATA_ACCESS_ROLE_ARN }}
      run: |
        npm install -g aws-cdk
        cdk deploy --all --require-approval never
